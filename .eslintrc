{
  "env": {
    "node": true
  },
  "globals": {
    "it": true,
    "describe": true,
    "beforeEach": true,
    "expect": true
  },
  "rules": {
    // Enforces getter/setter pairs in objects (off by default)
    "accessor-pairs": 2,
    // Treat var statements as if they were block scoped (off by default)
    "block-scoped-var": 2,
    // Specify the maximum cyclomatic complexity allowed in a program (off by default)
    "complexity": [2, 6],
    // Require return statements to either always or never specify values
    "consistent-return": 2,
    // Specify curly brace conventions for all control statements
    "curly": [2, "all"],
    // Require default case in switch statements (off by default)
    "default-case": 2,
    // Encourages use of dot notation whenever possible
    "dot-notation": [2, {"allowKeywords": true}],
    // Enforces consistent newlines before or after dots (off by default)
    "dot-location": [2, "property"],
    // Require the use of === and !==
    "eqeqeq": 2,
    // Make sure for-in loops have an if statement (off by default)
    "guard-for-in": 2,
    // Disallow the use of alert, confirm, and prompt
    "no-alert": 2,
    // Disallow use of arguments.caller or arguments.callee
    "no-caller": 2,
    // Disallow division operators explicitly at beginning of regular expression (off by default)
    "no-div-regex": 2,
    // Disallow else after a return in an if (off by default)
    "no-else-return": 2,
    // Disallow use of labels for anything other than loops and switches
    "no-empty-label": 2,
    // Disallow comparisons to null without a type-checking operator (off by default)
    "no-eq-null": 2,
    // Disallow use of eval()
    "no-eval": 2,
    // Disallow adding to native types
    "no-extend-native": 2,
    // Disallow unnecessary function binding
    "no-extra-bind": 2,
    // Disallow fallthrough of case statements
    "no-fallthrough": 2,
    // Disallow the use of leading or trailing decimal points in numeric literals (off by default)
    "no-floating-decimal": 2,
    // Disallow use of eval()-like methods
    "no-implied-eval": 2,
    // Disallow usage of __iterator__ property
    "no-iterator": 2,
    // Disallow use of labeled statements
    "no-labels": 2,
    // Disallow unnecessary nested blocks
    "no-lone-blocks": 2,
    // Disallow creation of functions within loops
    "no-loop-func": 2,
    // Disallow use of multiple spaces
    "no-multi-spaces": 2,
    // Disallow use of multiline strings
    "no-multi-str": 2,
    // Disallow reassignments of native objects
    "no-native-reassign": 2,
    // Disallow use of new operator for Function object
    "no-new-func": 2,
    // Disallows creating new instances of String, Number, and Boolean
    "no-new-wrappers": 2,
    // Disallow use of new operator when not part of the assignment or comparison
    "no-new": 2,
    // Disallow use of octal escape sequences in string literals,
    // such as var foo = "Copyright \251";
    "no-octal-escape": 2,
    // Disallow use of octal literals
    "no-octal": 2,
    // Allow reassignment of function parameters (off by default)
    "no-param-reassign": 0,
    // Disallow use of process.env (off by default)
    "no-process-env": 2,
    // Disallow usage of __proto__ property
    "no-proto": 2,
    // Disallow declaring the same variable more than once
    "no-redeclare": 2,
    // Disallow use of assignment in return statement
    "no-return-assign": 2,
    // Disallow use of javascript: urls.,
    "no-script-url": 2,
    // Disallow comparisons where both sides are exactly the same (off by default)
    "no-self-compare": 2,
    // Disallow use of comma operator
    "no-sequences": 2,
    // Restrict what can be thrown as an exception (off by default)
    "no-throw-literal": 2,
    // Allow usage of expressions in statement position
    "no-unused-expressions": 0, // because of Chai :(
    // Disallow use of void operator (off by default)
    "no-void": 2,
    // Disallow usage of configurable warning terms in comments
    "no-warning-comments": 1,
    // Disallow use of the with statement
    "no-with": 2,
    // Require use of the second argument for parseInt() (off by default)
    "radix": 2,
    // Requires to declare all vars on top of their containing scope (off by default)
    "vars-on-top": 2,
    // Require immediate function invocation to be wrapped in parentheses (off by default)
    "wrap-iife": [2, "inside"],
    // Require or disallow Yoda conditions
    "yoda": [2, "never"],

    // Verify super() callings in constructors (off by default)
    "constructor-super": 2,
    // Enforce the spacing around the * in generator functions (off by default)
    "generator-star-spacing": [2, "after"],
    // Disallow to use this/super before super() calling in constructors. (off by default)
    "no-this-before-super": 2,
    // Require let or const instead of var (off by default)
    "no-var": 2,
    // Require method and property shorthand syntax for object literals (off by default)
    "object-shorthand": [2, "always"],
    // Suggest using of const declaration for variables that are never modified after declared (off by default)
    "prefer-const": 2,

    // Enforces error handling in callbacks (off by default) (on by default in the node environment)
    "handle-callback-err": [2, "^.*(e|E)rr(or)?$"],
    // Disallow mixing regular variable and require declarations (off by default) (on by default in the node environment)
    "no-mixed-requires": 2,
    // Disallow use of new operator with the require function (off by default) (on by default in the node environment)
    "no-new-require": 2,
    // Disallow string concatenation with __dirname and __filename (off by default) (on by default in the node environment)
    "no-path-concat": 2,
    // Disallow process.exit() (on by default in the node environment)
    "no-process-exit": 2,
    // Restrict usage of specified node modules (off by default)
    "no-restricted-modules": 0,
    // Disallow use of synchronous methods (off by default)
    "no-sync": 2,

    // Disallow or enforce trailing commas
    "comma-dangle": 2,
    // Disallow assignment in conditional expressions
    "no-cond-assign": 2,
    // Disallow use of console (off by default in the node environment)
    "no-console": 2,
    // Disallow use of constant expressions in conditions
    "no-constant-condition": 2,
    // Disallow control characters in regular expressions
    "no-control-regex": 2,
    // Disallow use of debugger
    "no-debugger": 2,
    // Disallow duplicate arguments in functions
    "no-dupe-args": 2,
    // Disallow duplicate keys when creating object literals
    "no-dupe-keys": 2,
    // Disallow a duplicate case label.
    "no-duplicate-case": 2,
    // Disallow the use of empty character classes in regular expressions
    "no-empty-character-class": 2,
    // Disallow empty statements
    "no-empty": 2,
    // Disallow assigning to the exception in a catch block
    "no-ex-assign": 2,
    // Disallow double-negation boolean casts in a boolean context
    "no-extra-boolean-cast": 0,
    // Disallow unnecessary parentheses (off by default)
    "no-extra-parens": 2,
    // Disallow unnecessary semicolons
    "no-extra-semi": 2,
    // Disallow overwriting functions written as function declarations
    "no-func-assign": 2,
    // Disallow function or variable declarations in nested blocks
    "no-inner-declarations": 2,
    // Disallow invalid regular expression strings in the RegExp constructor
    "no-invalid-regexp": 2,
    // Disallow irregular whitespace outside of strings and comments
    "no-irregular-whitespace": 2,
    // Disallow negation of the left operand of an in expression
    "no-negated-in-lhs": 2,
    // Disallow the use of object properties of the global object (Math and JSON) as functions
    "no-obj-calls": 2,
    // Disallow multiple spaces in a regular expression literal
    "no-regex-spaces": 2,
    // Disallow reserved words being used as object literal keys (off by default)
    "no-reserved-keys": 0,
    // Disallow sparse arrays
    "no-sparse-arrays": 2,
    // Disallow unreachable statements after a return, throw, continue, or break statement
    "no-unreachable": 2,
    // Disallow comparisons with the value NaN
    "use-isnan": 2,
    // Ensure JSDoc comments are valid (off by default)
    "valid-jsdoc": 2,
    // Ensure that the results of typeof are compared against a valid string
    "valid-typeof": 2,
    // Avoid code that looks like two expressions but is actually one (off by default)
    "no-unexpected-multiline": 2,

    // Enforce spacing inside array brackets (off by default)
    "array-bracket-spacing": [2, "never"],
    // Enforce one true brace style (off by default)
    "brace-style": [2, "1tbs", {"allowSingleLine": true}],
    // Require camel case names
    "camelcase": [2, {"properties": "never"}],
    // Enforce spacing before and after comma
    "comma-spacing": [2, {"before": false, "after": true}],
    // Enforce one true comma style (off by default)
    "comma-style": [2, "last"],
    // Require or disallow padding inside computed properties (off by default)
    "computed-property-spacing": [2, "never"],
    // Enforces consistent naming when capturing the current execution context (off by default)
    "consistent-this": [2, "self"],
    // Enforce newline at the end of file, with no multiple empty lines
    "eol-last": 2,
    // Don"t require function expressions to have a name (off by default)
    "func-names": 0,
    // Enforces use of function declarations or expressions (off by default)
    "func-style": [2, "declaration"],
    // This option sets a specific tab width for your code (off by default)
    "indent": [2, 2, {"SwitchCase": 1}],
    // Enforces spacing between keys and values in object literal properties
    "key-spacing": [2, {"beforeColon": false, "afterColon": true}],
    // Enforces empty lines around comments (off by default)
    "lines-around-comment": [2, {"beforeBlockComment": true}],
    // Disallow mixed "LF" and "CRLF" as linebreaks (off by default)
    "linebreak-style": 0,
    // Specify the maximum depth callbacks can be nested (off by default)
    "max-nested-callbacks": [2, 3],
    // Require a capital letter for constructors
    "new-cap": [2, {"newIsCap": true}],
    // Disallow the omission of parentheses when invoking a constructor with no arguments
    "new-parens": 2,
    // Allow/disallow an empty newline after var statement (off by default)
    "newline-after-var": 0,
    // Disallow use of the Array constructor
    "no-array-constructor": 2,
    // Disallow use of the continue statement (off by default)
    "no-continue": 2,
    // Disallow comments inline after code (off by default)
    "no-inline-comments": 0,
    // Disallow if as the only statement in an else block (off by default)
    "no-lonely-if": 2,
    // Disallow mixed spaces and tabs for indentation
    "no-mixed-spaces-and-tabs": 2,
    // Disallow multiple empty lines (off by default)
    "no-multiple-empty-lines": 2,
    // Disallow nested ternary expressions (off by default)
    "no-nested-ternary": 2,
    // Disallow use of the Object constructor
    "no-new-object": 2,
    // (deprecated) disallow space before semicolon (off by default)
    "semi-spacing": 2,
    // Disallow space between function identifier and application
    "no-spaced-func": 2,
    // Disallow the use of ternary operators (off by default)
    "no-ternary": 0,
    // Disallow trailing whitespace at the end of lines
    "no-trailing-spaces": 2,
    // Allow dangling underscores in identifiers
    "no-underscore-dangle": 0,
    // Disallow the use of Boolean literals in conditional expressions (off by default)
    "no-unneeded-ternary": 2,
    // Require or disallow padding inside curly braces (off by default)
    "object-curly-spacing": [2, "never"],
    // Allow or disallow one variable declaration per function (off by default)
    "one-var": [2, "never"],
    // Require assignment operator shorthand where possible or prohibit it entirely (off by default)
    "operator-assignment": [2, "always"],
    // Enforce operators to be placed before or after line breaks (off by default)
    "operator-linebreak": [2, "after"],
    // Enforce padding within blocks (off by default)
    "padded-blocks": 0,
    // Require quotes around object literal property names (off by default)
    "quote-props": [2, "as-needed"],
    // Specify whether backticks, double or single quotes should be used
    "quotes": [2, "single"],
    // Enforce spacing before and after semicolons
    "semi-spacing": [2, {"before": false, "after": true}],
    // Require or disallow use of semicolons instead of ASI
    "semi": [2, "always"],
    // Sort variables within the same declaration block (off by default)
    "sort-vars": 0,
    // Require a space after certain keywords (off by default)
    "space-after-keywords": [2, "always"],
    // Require or disallow space before blocks (off by default)
    "space-before-blocks": [2, "always"],
    // Require or disallow space before function opening parenthesis (off by default)
    "space-before-function-paren": [2, {"anonymous": "always", "named": "never"}],
    // Require or disallow spaces inside parentheses (off by default)
    "space-in-parens": [2, "never"],
    // Require spaces around operators
    "space-infix-ops": 2,
    // Require a space after return, throw, and case
    "space-return-throw-case": 2,
    // Require or disallow spaces before/after unary operators (words on by default, nonwords off by default)
    "space-unary-ops": [2, {"words": true, "nonwords": false}],
    // Require or disallow a space immediately following the // or /* in a comment (off by default)
    "spaced-comment": [2, "always"],
    // Require regex literals to be wrapped in parentheses (off by default)
    "wrap-regex": 0,

    // Disallow the catch clause parameter name being the same as a variable in the outer scope (off by default in the node environment)
    "no-catch-shadow": 2,
    // Disallow deletion of variables
    "no-delete-var": 2,
    // Disallow labels that share a name with a variable
    "no-label-var": 2,
    // Disallow shadowing of names such as arguments
    "no-shadow-restricted-names": 2,
    // Disallow declaration of variables already declared in the outer scope
    "no-shadow": 2,
    // Disallow use of undefined when initializing variables
    "no-undef-init": 2,
    // Disallow use of undeclared variables unless mentioned in a /*global */ block
    "no-undef": 2,
    // Disallow use of undefined variable (off by default)
    "no-undefined": 2,
    // Disallow declaration of variables that are not used in the code
    "no-unused-vars": 2,
    // Disallow use of variables before they are defined
    "no-use-before-define": 2
  },
  "ecmaFeatures": {
    // Enable arrow functions
    "arrowFunctions": true,
    // Enable binary literals
    "binaryLiterals": true,
    // Enable let and const (aka block bindings)
    "blockBindings": true,
    // Enable classes
    "classes": true,
    // Enable default function parameters
    "defaultParams": true,
    // Enable destructuring
    "destructuring": true,
    // Enable for-of loops
    "forOf": true,
    // Enable generators
    "generators": true,
    // Enable modules and global strict mode
    "modules": true,
    // Enable computed object literal property names
    "objectLiteralComputedProperties": true,
    // Enable duplicate object literal properties in strict mode
    "objectLiteralDuplicateProperties": true,
    // Enable object literal shorthand methods
    "objectLiteralShorthandMethods": true,
    // Enable object literal shorthand properties
    "objectLiteralShorthandProperties": true,
    // Enable octal literals
    "octalLiterals": true,
    // Enable the regular expression u flag
    "regexUFlag": true,
    // Enable the regular expression y flag
    "regexYFlag": true,
    // Enable the rest parameters
    "restParams": true,
    // Enable the spread operator
    "spread": true,
    // Enable super references inside of functions
    "superInFunctions": true,
    // Enable template strings
    "templateStrings": true,
    // Enable code point escapes
    "unicodeCodePointEscapes": true
  }
}
